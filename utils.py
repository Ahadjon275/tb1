#!/usr/bin/env python3

import ast
import concurrent.futures
import datetime
import functools
import hashlib
import io
import json
import html
import os
import pathlib
import pytz
import random
import re
import regex
import requests
import string
import subprocess
import sys
import tempfile
import threading
import platform as platform_module
from typing import Union, Optional

import json_repair
import PIL
import prettytable
import telebot
from pylatexenc.latex2text import LatexNodes2Text
from pillow_heif import register_heif_opener

import my_log


register_heif_opener()


def async_run(func):
    '''–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ'''
    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        thread = threading.Thread(target=func, args=args, kwargs=kwargs)
        thread.start()
    return wrapper


def get_file_ext(fname: str) -> str:
    '''return extension of file using pathlib'''
    try:
        p = pathlib.Path(fname)
        return p.suffix
    except Exception as error:
        my_log.log2(f'utils:get_file_ext {error}\n{fname}')
        return ''


def split_text(text: str, chunk_limit: int = 1500):
    """ Splits one string into multiple strings, with a maximum amount of chars_per_string
        characters per string. This is very useful for splitting one giant message into multiples.
        If chars_per_string > 4096: chars_per_string = 4096. Splits by '\n', '. ' or ' ' in exactly
        this priority.

        :param text: The text to split
        :type text: str

        :param chars_per_string: The number of maximum characters per part the text is split to.
        :type chars_per_string: int

        :return: The splitted text as a list of strings.
        :rtype: list of str
    """
    return telebot.util.smart_split(text, chunk_limit)


def split_text_my(text: str, chunk_limit: int = 1500):
    """—Ä–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –∑–∞–¥–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã –Ω–µ —Ä–∞–∑—Ä—ã–≤–∞—è —Å–ª–æ–≤–∞,
    –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –∫—É—Å–∫–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ —á–µ–º –∑–∞–¥–∞–Ω–æ, –µ—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –Ω–µ—Ç –ø—Ä–æ–±–µ–ª–æ–≤ —Ç–æ –Ω–∞–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ –ñ)"""
    # —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∞—Å—Ç–µ–π —Ç–µ–∫—Å—Ç–∞
    chunks = []
    # —Å–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ –≤ —Ç–µ–∫—Å—Ç–µ
    position = 0
    # –ø–æ–∫–∞ –ø–æ–∑–∏—Ü–∏—è –º–µ–Ω—å—à–µ –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞
    while position < len(text):
        # –Ω–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –ø—Ä–æ–±–µ–ª–∞ –ø–æ—Å–ª–µ –ª–∏–º–∏—Ç–∞
        space_index = text.find(" ", position + chunk_limit)
        # –µ—Å–ª–∏ –ø—Ä–æ–±–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ç–æ –±–µ—Ä–µ–º –≤–µ—Å—å –æ—Å—Ç–∞–≤—à–∏–π—Å—è —Ç–µ–∫—Å—Ç
        if space_index == -1:
            space_index = len(text)
        # –¥–æ–±–∞–≤–ª—è–µ–º —á–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞ –æ—Ç —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ –¥–æ –ø—Ä–æ–±–µ–ª–∞ –≤ —Å–ø–∏—Å–æ–∫
        chunks.append(text[position:space_index])
        # –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Å–∏–º–≤–æ–ª –ø–æ—Å–ª–µ –ø—Ä–æ–±–µ–ª–∞
        position = space_index + 1
    # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Å—Ç–µ–π —Ç–µ–∫—Å—Ç–∞
    return chunks


def platform() -> str:
    """
    Return the platform information.
    """
    return platform_module.platform()


def bot_markdown_to_tts(text: str) -> str:
    """–º–µ–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç –±–æ—Ç–æ–≤ —Ç–∞–∫ —á—Ç–æ –±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –∑–∞—á–∏—Ç–∞—Ç—å —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ TTS"""
    
    # –ø–µ—Ä–µ–¥–µ–ª—ã–≤–∞–µ–º —Å–ø–∏—Å–∫–∏ –Ω–∞ –±–æ–ª–µ–µ –∫—Ä–∞—Å–∏–≤—ã–µ
    new_text = ''
    for i in text.split('\n'):
        ii = i.strip()
        if ii.startswith('* '):
            i = i.replace('* ', '‚Ä¢ ', 1)
        if ii.startswith('- '):
            i = i.replace('- ', '‚Ä¢ ', 1)
        new_text += i + '\n'
    text = new_text.strip()

    # 1 –∏–ª–∏ 2 * –≤ 0 –∑–≤–µ–∑–¥–æ—á–µ–∫ *bum* -> bum
    text = re.sub('\*\*?(.*?)\*\*?', '\\1', text)

    # tex –≤ unicode
    matches = re.findall(r"(?:\$\$?|\\\[|\\\(|\\\[)(.*?)(?:\$\$?|\\\]|\\\)|\\\])", text, flags=re.DOTALL)
    for match in matches:
        new_match = LatexNodes2Text().latex_to_text(match.replace('\\\\', '\\'))
        text = text.replace(f'$${match}$$', new_match)
        text = text.replace(f'${match}$', new_match)
        text = text.replace(f'\[{match}\]', new_match)
        text = text.replace(f'\({match}\)', new_match)

    # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤, –∫—Ä–æ–º–µ –±—É–∫–≤, —Ü–∏—Ñ—Ä –∏ –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
    pattern = regex.compile(r'[^\p{L}\p{N}\p{P} ]', re.UNICODE)
    # –ó–∞–º–µ–Ω–∞ –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
    text = pattern.sub('', text)

    return text


def bot_markdown_to_html(text: str) -> str:
    # –ø–µ—Ä–µ–¥–µ–ª—ã–≤–∞–µ—Ç –º–∞—Ä–∫–¥–∞—É–Ω –æ—Ç —á–∞—Ç–±–æ—Ç–æ–≤ –≤ —Ö—Ç–º–ª –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º–∞
    # —Å–Ω–∞—á–∞–ª–∞ –¥–µ–ª–∞–µ—Ç—Å—è –ø–æ–ª–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    # –∑–∞—Ç–µ–º –º–µ–Ω—è—é—Ç—Å—è –º–∞—Ä–∫–¥–∞—É–Ω —Ç–µ–≥–∏ –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –Ω–∞ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ–µ –≤ —Ö—Ç–º–ª
    # –ø—Ä–∏ —ç—Ç–æ–º –Ω–µ –∑–∞—Ç—Ä–∞–≥–∏–≤–∞–µ—Ç—Å—è —Ç–æ —á—Ç–æ –≤–Ω—É—Ç—Ä–∏ —Ç–µ–≥–æ–≤ –∫–æ–¥, —Ç–∞–º —Ç–æ–ª—å–∫–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    # –ª–∞—Ç–µ–∫—Å –∫–æ–¥ –≤ —Ç–µ–≥–∞—Ö $ –∏ $$ –º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ —é–Ω–∏–∫–æ–¥ —Ç–µ–∫—Å—Ç


    # –°–ª–æ–≤–∞—Ä—å –ø–æ–¥—Å—Ç—Ä–æ—á–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    subscript_map = {
        '0': '‚ÇÄ', '1': '‚ÇÅ', '2': '‚ÇÇ', '3': '‚ÇÉ', '4': '‚ÇÑ', '5': '‚ÇÖ',
        '6': '‚ÇÜ', '7': '‚Çá', '8': '‚Çà', '9': '‚Çâ',
        '+': '‚Çä', '-': '‚Çã', '=': '‚Çå', '(': '‚Çç', ')': '‚Çé',
        'a': '‚Çê',
        # 'b': '‚ô≠', 
        'c': 'ÍúÄ',
        # 'd': '·ëØ',
        'e': '‚Çë',
        # 'f': '‚®ç',
        'g': '‚Çâ',
        'h': '‚Çï',
        'i': '·µ¢',
        'j': '‚±º',
        'k': '‚Çñ',
        'l': '‚Çó',
        'm': '‚Çò',
        'n': '‚Çô',
        'o': '‚Çí',
        'p': '‚Çö',
        # 'q': '‡´ß',
        'r': '·µ£',
        's': '‚Çõ',
        't': '‚Çú',
        'u': '·µ§',
        'v': '·µ•',
        # 'w': 'w',
        'x': '‚Çì',
        'y': '·µß',
        'z': '‚ÇÇ'
    }

    # –°–ª–æ–≤–∞—Ä—å –Ω–∞–¥—Å—Ç—Ä–æ—á–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    superscript_map = {
        '0': '‚Å∞', '1': '¬π', '2': '¬≤', '3': '¬≥', '4': '‚Å¥', '5': '‚Åµ',
        '6': '‚Å∂', '7': '‚Å∑', '8': '‚Å∏', '9': '‚Åπ',
        '+': '‚Å∫', '-': '‚Åª', '=': '‚Åº', '(': '‚ÅΩ', ')': '‚Åæ',
        'a': '·µÉ',
        'b': '·µá',
        'c': '·∂ú',
        'd': '·µà',
        'e': '·µâ',
        'f': '·∂†',
        'g': '·µç',
        'h': ' ∞',
        'i': '‚Å±',
        'j': ' ≤',
        'k': '·µè',
        'l': 'À°',
        'm': '·µê',
        'n': '‚Åø',
        'o': '·µí',
        'p': '·µñ',
        'q': 'êû•', 
        'r': ' ≥',
        's': 'À¢',
        't': '·µó',
        'u': '·µò',
        'v': '·µõ',
        'w': ' ∑',
        'x': 'À£',
        'y': ' ∏',
        'z': '·∂ª'
    }

    # —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –¥–ª—è html
    text = html.escape(text)

    # –∑–∞–º–µ–Ω—è–µ–º —Å—Ç—Ä–∞–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–¥–∞ –∫–æ–≥–¥–∞ –∏–¥–µ—Ç 0-6 –ø—Ä–æ–±–µ–ª–æ–≤ –≤ –Ω–∞—á–∞–ª–µ –ø–æ—Ç–æ–º ` –∏–ª–∏ `` –∏–ª–∏ ``` –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —è–∑—ã–∫–∞
    pattern = r"^ {0,6}`{1,3}(\w+)\n(.*?)\n  {0,6}`{1,3}$"
    # replacement = r"```\1\n\2\n```"
    replacement = lambda match: f"```{match.group(1)}\n{re.sub(r'^ {1,6}', '', match.group(2), flags=re.MULTILINE)}\n```"
    text = re.sub(pattern, replacement, text, flags=re.MULTILINE | re.DOTALL)


    # –Ω–∞–π—Ç–∏ –≤—Å–µ –∫—É—Å–∫–∏ –∫–æ–¥–∞ –º–µ–∂–¥—É ``` –∏ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ö–µ—à–∏
    # —Å–ø—Ä—è—Ç–∞—Ç—å –∫–æ–¥ –Ω–∞ –≤—Ä–µ–º—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π
    matches = re.findall('```(.*?)```\n', text, flags=re.DOTALL)
    list_of_code_blocks = []
    for match in matches:
        random_string = str(hash(match))
        list_of_code_blocks.append([match, random_string])
        text = text.replace(f'```{match}```', random_string)

    matches = re.findall('```(.*?)```', text, flags=re.DOTALL)
    for match in matches:
        random_string = str(hash(match))
        list_of_code_blocks.append([match, random_string])
        text = text.replace(f'```{match}```', random_string)

    # –∑–∞–º–µ–Ω–∞ —Ç–µ–≥–æ–≤ <sub> <sup> –Ω–∞ –ø–æ–¥—Å—Ç—Ä–æ—á–Ω—ã–µ –∏ –Ω–∞–¥—Å—Ç—Ä–æ—á–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    text = re.sub(r'&lt;sup&gt;(.*?)&lt;/sup&gt;', lambda m: ''.join(superscript_map.get(c, c) for c in m.group(1)), text)
    text = re.sub(r'&lt;sub&gt;(.*?)&lt;/sub&gt;', lambda m: ''.join(subscript_map.get(c, c) for c in m.group(1)), text)

    # —Ç—É—Ç –º–æ–≥—É—Ç –±—ã—Ç—å –æ–¥–∏–Ω–æ—á–Ω—ã–µ –ø–æ–≤–æ—Ä—è—é—â–∏–µ—Å—è `, –º–µ–Ω—è–µ–º –∏—Ö –Ω–∞ '
    text = text.replace('```', "'''")

    matches = re.findall('`(.*?)`', text)
    list_of_code_blocks2 = []
    for match in matches:
        random_string = ''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(16))
        list_of_code_blocks2.append([match, random_string])
        text = text.replace(f'`{match}`', random_string)

    # –ø–µ—Ä–µ–¥–µ–ª—ã–≤–∞–µ–º —Å–ø–∏—Å–∫–∏ –Ω–∞ –±–æ–ª–µ–µ –∫—Ä–∞—Å–∏–≤—ã–µ
    new_text = ''
    for i in text.split('\n'):
        ii = i.strip()
        if ii.startswith('* '):
            i = i.replace('* ', '‚Ä¢ ', 1)
        if ii.startswith('- '):
            i = i.replace('- ', '‚Äì ', 1)
        new_text += i + '\n'
    text = new_text.strip()

    # 1,2,3,4 # –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏ –º–µ–Ω—è–µ–º –≤—Å—é —Å—Ç—Ä–æ–∫—É –Ω–∞ –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
    text = re.sub('^#### (.*)$', '<b>‚ñè\\1</b>', text, flags=re.MULTILINE)
    text = re.sub('^### (.*)$', '<b>‚ñè\\1</b>', text, flags=re.MULTILINE)
    text = re.sub('^## (.*)$', '<b>‚ñå \\1</b>', text, flags=re.MULTILINE)
    text = re.sub('^# (.*)$', '<b>‚ñà \\1</b>', text, flags=re.MULTILINE)
    # —Ç–æ—á–∫–∞ –ø—Ä–æ–±–µ–ª —Ç—Ä–∏ —Ö–µ—à–∞ –∏ –ø—Ä–æ–±–µ–ª –≤ –Ω–∞—á–∞–ª–µ —Ç–æ–∂–µ –¥–µ–ª–∞—Ç—å –∂–∏—Ä–Ω—ã–º
    text = re.sub('^\.  #### (.*)$', '<b>‚ñè\\1</b>', text, flags=re.MULTILINE)
    text = re.sub('^\. ### (.*)$', '<b>‚ñè\\1</b>', text, flags=re.MULTILINE)
    text = re.sub('^\.  ### (.*)$', '<b>‚ñè\\1</b>', text, flags=re.MULTILINE)
    text = re.sub('^\.  ## (.*)$', '<b>‚ñå \\1</b>', text, flags=re.MULTILINE)
    text = re.sub('^\.  # (.*)$', '<b>‚ñà \\1</b>', text, flags=re.MULTILINE)

    # —Ü–∏—Ç–∞—Ç—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å &gt; –∏—Ö –Ω–∞–¥–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ <blockquote></blockquote>
    # &gt; –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ª–∏–±–æ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏, –ª–∏–±–æ —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±–µ–ª—ã –ø–æ—Ç–æ–º &gt;
    # –µ—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–¥—Ä—è–¥ —Å—Ç—Ä–æ–∫ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å &gt; —Ç–æ –∏—Ö –≤—Å–µ—Ö –Ω–∞–¥–æ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –≤ –æ–¥–∏–Ω –±–ª–æ–∫ <blockquote>
    def process_quotes(text):
        # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏
        lines = text.split('\n')
        result = []
        quote_lines = []
        
        for line in lines:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ —Ü–∏—Ç–∞—Ç–æ–π (—Å —É—á–µ—Ç–æ–º –ø—Ä–æ–±–µ–ª–æ–≤ –≤ –Ω–∞—á–∞–ª–µ)
            if re.match('^\s*&gt;\s*(.*)$', line):
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ &gt;
                quote_content = re.sub('^\s*&gt;\s*(.*)$', '\\1', line)
                quote_lines.append(quote_content)
            else:
                # –ï—Å–ª–∏ –Ω–∞–∫–æ–ø–∏–ª–∏—Å—å —Ü–∏—Ç–∞—Ç—ã, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if quote_lines:
                    quote_text = '\n'.join(quote_lines)
                    result.append(f'<blockquote>{quote_text}</blockquote>')
                    quote_lines = []
                result.append(line)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Ü–∏—Ç–∞—Ç—ã –≤ –∫–æ–Ω—Ü–µ —Ç–µ–∫—Å—Ç–∞
        if quote_lines:
            quote_text = '\n'.join(quote_lines)
            result.append(f'<blockquote>{quote_text}</blockquote>')
        
        return '\n'.join(result)

    text = process_quotes(text)


    # –∑–∞–º–µ–Ω–∏—Ç—å –¥–≤–æ–π–Ω—ã–µ –∏ —Ç—Ä–æ–π–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –≤ —Ç–µ–∫—Å—Ç–µ (—Ç–æ–ª—å–∫–æ —Ç–µ —á—Ç–æ –º–µ–∂–¥—É –±—É–∫–≤–∞–º–∏ –∏ –∑–Ω–∞–∫–∞–º–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è)
    text = re.sub(r'(?<=\w)    (?=\S)', ' ', text)
    text = re.sub(r'(?<=\S)    (?=\w)', ' ', text)
    text = re.sub(r'(?<=\w)   (?=\S)', ' ', text)
    text = re.sub(r'(?<=\S)   (?=\w)', ' ', text)
    text = re.sub(r'(?<=\w)  (?=\S)', ' ', text)
    text = re.sub(r'(?<=\S)  (?=\w)', ' ', text)

    # 3 –∏ –±–æ–ª—å—à–µ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫–∏ –∏–¥—É—â–∏—Ö –ø–æ–¥—Ä—è–¥ –º–µ–Ω—è–µ–º –Ω–∞ 2
    text = re.sub('(?:\s*\n){3,}', '\n\n\n', text)

    # 2 * –≤ <b></b>
    text = re.sub('\*\*(.+?)\*\*', '<b>\\1</b>', text)
    text = re.sub(r'^\*\*(.*?)\*\*$', r'<b>\1</b>', text, flags=re.MULTILINE | re.DOTALL)

    # 2 _ –≤ <i></i>
    text = re.sub('\_\_(.+?)\_\_', '<i>\\1</i>', text)
    text = re.sub(r'^\_\_(.*?)\_\_$', r'<i>\1</i>', text, flags=re.MULTILINE | re.DOTALL)

    # –ó–∞–º–µ–Ω–∞ _*—Ç–µ–∫—Å—Ç*_ –Ω–∞ <i>—Ç–µ–∫—Å—Ç</i>
    text = re.sub(r"(?<!\w)_\*([^\n\s].*?[^\n\s])\*_(?!\w)", r"<i>\1</i>", text)

    # 1 _ –≤ <i></i>
    text = re.sub(r"(?<!\w)_([^\n\s_*][^\n*_]*[^\n\s_*])_(?!\w)", r"<i>\1</i>", text)

    # –ó–∞–º–µ–Ω–∞ *—Ç–µ–∫—Å—Ç* –Ω–∞ <i>—Ç–µ–∫—Å—Ç</i>
    text = re.sub(r"(?<!\w)\*(?!\s)([^\n*]+?)(?<!\s)\*(?!\w)", r"<i>\1</i>", text)

    # –ó–∞–º–µ–Ω–∞ ~~—Ç–µ–∫—Å—Ç~~ –Ω–∞ <s>—Ç–µ–∫—Å—Ç</s>
    text = re.sub(r"(?<!\w)~~(?!\s)([^\n*]+?)(?<!\s)~~(?!\w)", r"<s>\1</s>", text)

    # –ó–∞–º–µ–Ω–∞ ||—Ç–µ–∫—Å—Ç|| –Ω–∞ <tg-spoiler>—Ç–µ–∫—Å—Ç</tg-spoiler>
    text = re.sub(r"(?<!\w)\|\|(?!\s)([^\n*]+?)(?<!\s)\|\|(?!\w)", r"<tg-spoiler>\1</tg-spoiler>", text)

    # tex –≤ unicode
    matches = re.findall(r"(?:\$\$?|\\\[|\\\(|\\\[)(.*?)(?:\$\$?|\\\]|\\\)|\\\])", text, flags=re.DOTALL)
    for match in matches:
        new_match = LatexNodes2Text().latex_to_text(match.replace('\\\\', '\\'))
        text = text.replace(f'$${match}$$', new_match)
        text = text.replace(f'${match}$', new_match)
        text = text.replace(f'\[{match}\]', new_match)
        text = text.replace(f'\({match}\)', new_match)


    # –º–µ–Ω—è–µ–º –º–∞—Ä–∫–¥–∞—É–Ω —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ö—Ç–º–ª
    text = re.sub('''\[(.*?)\]\((https?://\S+)\)''', r'<a href="\2">\1</a>', text)

    # –º–µ–Ω—è–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Å—ã–ª–∫–∏ –≤ —Ö—Ç–º–ª —Ç–µ–≥–µ –∫—Ä–æ–º–µ —Ç–µ—Ö –∫—Ç–æ —É–∂–µ —Ç–∞–∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω
    # –∞ –∑–∞—á–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ? text = re.sub(r'(?<!<a href=")(https?://\S+)(?!">[^<]*</a>)', r'<a href="\1">\1</a>', text)

    # –º–µ–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—ã –¥–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–¥–∞
    text = replace_tables(text)

    # –º–µ–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ —Ö–µ—à–∏ –Ω–∞ –±–ª–æ–∫–∏ –∫–æ–¥–∞
    for match, random_string in list_of_code_blocks2:
        # new_match = html.escape(match)
        new_match = match
        text = text.replace(random_string, f'<code>{new_match}</code>')

    # –º–µ–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ —Ö–µ—à–∏ –Ω–∞ –±–ª–æ–∫–∏ –∫–æ–¥–∞
    for match, random_string in list_of_code_blocks:
        new_match = match
        text = text.replace(random_string, f'<code>{new_match}</code>')

    text = replace_code_lang(text)

    # —É–±—Ä–∞—Ç—å 3 –∏ –±–æ–ª–µ–µ –ø—É—Å—Ç—ã–µ —Å—Ä–æ–∫–∏ –ø–æ–¥—Ä—è–¥ (—Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞ –∏–ª–∏ –ª—é–±—ã—Ö —Ç–µ–≥–æ–≤)
    text = re.sub(r'>\n{4,}', '>\n\n\n', text)

    return text


def replace_code_lang(t: str) -> str:
    """
    Replaces the code language in the given string with appropriate HTML tags.
    Adds "language-plaintext" class if no language is specified but <code> tags are present.
    Parameters:
        t (str): The input string containing code snippets.
    Returns:
        str: The modified string with code snippets wrapped in HTML tags.
    """
    result = ''
    state = 0
    lines = t.split('\n')
    i = 0
    while i < len(lines):
        line = lines[i]

        # –û–¥–Ω–æ—Å—Ç—Ä–æ—á–Ω—ã–π –∫–æ–¥ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
        if '<code>' in line and '</code>' in line and line.startswith('<code>'):
            result += line + '\n'
            i += 1
            continue

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–≥–æ –∫–æ–¥–∞
        if line.startswith('<code>'):
            if len(line) >= 7 and '</code>' not in line:
                new_lang = line[6:]
                if new_lang.lower() == 'c++':
                    new_lang = 'cpp'
                result += f'<pre><code class="language-{new_lang}">'
                state = 1
            elif line == '<code>':
                result += '<pre><code class="language-plaintext">'
                state = 1
        elif state == 1:
            if line == '</code>':
                result += '</code></pre>\n'
                state = 0
            else:
                result += line + '\n'
        else:
            result += line + '\n'
        i += 1
    return result



def replace_tables(text: str) -> str:
    """
    –ó–∞–º–µ–Ω—è–µ—Ç markdown —Ç–∞–±–ª–∏—Ü—ã –Ω–∞ –∏—Ö prettytable –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ.
    –î–æ–±–∞–≤–ª–µ–Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ —Ç–∞–±–ª–∏—Ü—ã.
    """
    text += '\n'
    state = 0
    table = ''
    results = []
    
    def is_valid_separator(line: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –≤–∞–ª–∏–¥–Ω—ã–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ç–∞–±–ª–∏—Ü—ã"""
        if not line or line.count('|') < 2:
            return False
        # –£–±–∏—Ä–∞–µ–º –∫—Ä–∞–π–Ω–∏–µ |
        parts = line.strip('|').split('|')
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–∂–¥–∞—è —è—á–µ–π–∫–∞ —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ - –∏ : (–¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è)
        return all(part.strip().replace('-', '').replace(':', '') == '' for part in parts)

    def is_valid_table_row(line: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø–æ—Ö–æ–∂–µ–π –Ω–∞ —Å—Ç—Ä–æ–∫—É —Ç–∞–±–ª–∏—Ü—ã"""
        if not line or line.count('|') < 2:
            return False
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª –º–µ–∂–¥—É |
        parts = line.strip('|').split('|')
        return all(len(part.strip()) > 0 for part in parts)

    lines = text.split('\n')
    i = 0
    while i < len(lines):
        line = lines[i]
        
        # –ï—Å–ª–∏ –Ω–∞—Ö–æ–¥–∏–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É —Ç–∞–±–ª–∏—Ü—ã
        if is_valid_table_row(line):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É (—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å)
            if i + 1 < len(lines) and is_valid_separator(lines[i + 1]):
                if state == 0:
                    state = 1
                    table = line + '\n'
                    table += lines[i + 1] + '\n'
                    i += 2
                    continue
            elif state == 1:
                # –ï—Å–ª–∏ –º—ã —É–∂–µ –≤ —Ç–∞–±–ª–∏—Ü–µ, –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É
                table += line + '\n'
                i += 1
                continue
        
        # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        if state == 1:
            results.append(table[:-1])
            table = ''
            state = 0
        i += 1

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
    for table in results:
        x = prettytable.PrettyTable(align="l",
                                   set_style=prettytable.MSWORD_FRIENDLY,
                                   hrules=prettytable.HEADER,
                                   junction_char='|')
        lines = table.split('\n')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        if len(lines) < 2:
            continue
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        header = [x.strip().replace('<b>', '').replace('</b>', '') 
                 for x in lines[0].split('|') 
                 if x]
        header = [split_long_string(x, header=True) for x in header]
        
        try:
            x.field_names = header
        except Exception as error:
            my_log.log2(f'tb:replace_tables: {error}\n{text}\n\n{x}')
            continue

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å)
        for line in lines[2:]:
            row = [x.strip().replace('<b>', '').replace('</b>', '') 
                  for x in line.split('|') 
                  if x]
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
            if len(row) != len(header):
                continue
            row = [split_long_string(x) for x in row]
            try:
                x.add_row(row)
            except Exception as error2:
                my_log.log2(f'tb:replace_tables: {error2}\n{text}\n\n{x}')
                continue

        new_table = x.get_string()
        text = text.replace(table, f'<pre><code>{new_table}\n</code></pre>')
    
    return text



# def replace_tables(text: str) -> str:
#     text += '\n'
#     state = 0
#     table = ''
#     results = []
#     for line in text.split('\n'):
#         if line.count('|') > 2 and len(line) > 4:
#             if state == 0:
#                 state = 1
#             table += line + '\n'
#         else:
#             if state == 1:
#                 results.append(table[:-1])
#                 table = ''
#                 state = 0

#     for table in results:
#         x = prettytable.PrettyTable(align = "l",
#                                     set_style = prettytable.MSWORD_FRIENDLY,
#                                     hrules = prettytable.HEADER,
#                                     junction_char = '|')

#         lines = table.split('\n')
#         header = [x.strip().replace('<b>', '').replace('</b>', '') for x in lines[0].split('|') if x]
#         header = [split_long_string(x, header = True) for x in header]
#         try:
#             x.field_names = header
#         except Exception as error:
#             my_log.log2(f'tb:replace_tables: {error}\n{text}\n\n{x}')
#             continue
#         for line in lines[2:]:
#             row = [x.strip().replace('<b>', '').replace('</b>', '') for x in line.split('|') if x]
#             row = [split_long_string(x) for x in row]
#             try:
#                 x.add_row(row)
#             except Exception as error2:
#                 my_log.log2(f'tb:replace_tables: {error2}\n{text}\n\n{x}')
#                 continue
#         new_table = x.get_string()
#         text = text.replace(table, f'<pre><code>{new_table}\n</code></pre>')

#     return text


def split_html(text: str, max_length: int = 1500) -> list:
    """
    Splits HTML text into chunks with a maximum length, respecting code blocks, bold, and italic tags.

    Args:
        text: The HTML text to split.
        max_length: The maximum length of each chunk.

    Returns:
        A list of HTML chunks.
    """
    code_tag = ''
    in_code_mode = 0

    chunks = []
    chunk = ''

    for line in text.split('\n'):
        if line.startswith('<pre><code') and line.find('</code></pre>') == -1:
            in_code_mode = 1
            code_tag = line[:line.find('>', 10) + 1]
        elif line.startswith('<code>') and line.find('</code>') == -1:
            in_code_mode = 2
            code_tag = '<code>'
        elif line.startswith('<b>') and line.find('</b>') == -1:
            in_code_mode = 3
            code_tag = '<b>'
        elif line.startswith('<i>') and line.find('</i>') == -1:
            in_code_mode = 4
            code_tag = '<i>'
        elif line == '</code></pre>' or line == '</code>' or line == '</b>' or line == '</i>':
            code_tag = ''
            in_code_mode = 0
        else:
            if len(chunk) + len(line) + 20 > max_length:
                if in_code_mode == 1:
                    chunk += '</code></pre>\n'
                    chunks.append(chunk)
                    chunk = code_tag
                elif in_code_mode == 2:
                    chunk += '</code>\n'
                    chunks.append(chunk)
                    chunk = code_tag
                elif in_code_mode == 3:
                    chunk += '</b>\n'
                    chunks.append(chunk)
                    chunk = code_tag
                elif in_code_mode == 4:
                    chunk += '</i>\n'
                    chunks.append(chunk)
                    chunk = code_tag
                elif in_code_mode == 0:
                    chunks.append(chunk)
                    chunk = ''

        chunk += line + '\n'

    chunks.append(chunk)

    chunks2 = []
    for chunk in chunks:
        if len(chunk) > max_length:
            chunks2 += split_text(chunk, max_length)
        else:
            chunks2.append(chunk)

    return chunks2


def get_tmp_fname() -> str:
    """
    Generate a temporary file name.

    Returns:
        str: The name of the temporary file.
    """
    with tempfile.NamedTemporaryFile(delete=True) as temp_file:
        return temp_file.name


def split_long_string(long_string: str, header = False, MAX_LENGTH = 24) -> str:
    if len(long_string) <= MAX_LENGTH:
        return long_string
    if header:
        return long_string[:MAX_LENGTH-2] + '..'
    split_strings = []
    while len(long_string) > MAX_LENGTH:
        split_strings.append(long_string[:MAX_LENGTH])
        long_string = long_string[MAX_LENGTH:]

    if long_string:
        split_strings.append(long_string)

    result = "\n".join(split_strings) 
    return result


def is_image_link(url: str) -> bool:
  """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL-–∞–¥—Ä–µ—Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É.

  Args:
    url: URL-–∞–¥—Ä–µ—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.

  Returns:
    True, –µ—Å–ª–∏ URL-–∞–¥—Ä–µ—Å —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É, –∏–Ω–∞—á–µ False.
  """

  try:
    # response = requests.get(url, timeout=2, stream=True)
    content = b''
    response = requests.get(url, stream=True, timeout=10)
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
    for chunk in response.iter_content(chunk_size=1024):
        content += chunk
        if len(content) > 50000:
            break
    content_type = response.headers['Content-Type']
    return content_type.startswith('image/')
  except:
    return False


def download_image_as_bytes(url_or_urls):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ(—è) –ø–æ URL-–∞–¥—Ä–µ—Å—É(–∞–º) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ(–∏—Ö) –≤ –≤–∏–¥–µ –±–∞–π—Ç–æ–≤.

    Args:
        url_or_urls: URL-–∞–¥—Ä–µ—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ —Å–ø–∏—Å–æ–∫ URL-–∞–¥—Ä–µ—Å–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.

    Returns:
        –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –≤–∏–¥–µ –±–∞–π—Ç–æ–≤ –∏–ª–∏ —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –≤–∏–¥–µ –±–∞–π—Ç–æ–≤.
    """
    import concurrent.futures

    if isinstance(url_or_urls, str):
        try:
            response = requests.get(url_or_urls, timeout=30)
        except Exception as error:
            return None
        return response.content

    elif isinstance(url_or_urls, list):
        with concurrent.futures.ThreadPoolExecutor() as executor:
            results = list(executor.map(lambda url: requests.get(url, timeout=30).content if requests.get(url, timeout=30).status_code == 200 else None, url_or_urls))
        return results

    else:
        return None


def nice_hash(s: str, l: int = 12) -> str:
    """
    Generate a nice hash of the given string.

    Parameters:
        s (str): The string to hash.

    Returns:
        str: The nice hash of the string.
    """
    hash_object = hashlib.sha224(s.encode())
    return f'{hash_object.hexdigest()[:l]}'


def get_full_time() -> str:
    """
    Get the current time with a GMT time offset.

    Returns:
        str: A string representing the current time in the format "YYYY-MM-DD HH:MM:SS TZ".
    """
    now = datetime.datetime.now(pytz.timezone('Europe/Moscow'))
    time_string = now.strftime("%Y-%m-%d %H:%M:%S %Z")
    return time_string


def seconds_to_str(seconds: float) -> str:
    """
    Convert seconds to a string in the format "HH:MM:SS".

    Parameters:
        seconds (float): The number of seconds to convert.

    Returns:
        str: A string representing the time in the format "HH:MM:SS".
    """
    seconds = int(seconds)
    hours = seconds // 3600
    minutes = (seconds % 3600) // 60
    seconds = seconds % 60
    return f'{hours:02}:{minutes:02}:{seconds:02}'


def get_username_for_log(message) -> str:
    """
    Returns the username for logging purposes based on the given message.

    Args:
        message: The message object to extract the username from.
                 My be a group of messages (list).

    Returns:
        str: The username for logging.
    """
    if isinstance(message, list):
        message = message[0]

    if message.chat.type == 'private':
        return message.from_user.full_name or message.from_user.username or 'noname'
    else:
        if message.is_topic_message:
            return f'[{message.chat.title or message.chat.username or message.chat.first_name or "nonamechat"}] [{message.message_thread_id}]'
        else:
            return message.chat.title or message.chat.username or message.chat.first_name or 'nonamechat'


def safe_fname(s: str) -> str:
    """Return a safe filename for the given string, truncated to 250 bytes in UTF-8 encoding."""
    
    # Replace invalid characters
    s = re.sub(r'[\\/*?:"<>|]', '_', s)
    
    # Encode to UTF-8 and check length
    encoded_s = s.encode('utf-8')
    if len(encoded_s) <= 250:
        return s
    
    # Shorten filename if longer than 250 bytes
    while len(encoded_s) > 247:
        s = s[:len(s)//2-3] + '___' + s[len(s)//2+3:]
        encoded_s = s.encode('utf-8')
    return s


def remove_file(fname: str):
    '''–£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª –ø–æ –∏–º–µ–Ω–∏'''
    try:
        os.unlink(fname)
        return True
    except Exception as error:
        # my_log.log2(f'utils:remove_file: {fname}\n\n{error}')
        return False


def mime_from_buffer(data: bytes) -> str:
    """
    Get the MIME type of the given buffer.

    Parameters:
        data (bytes): The buffer to get the MIME type of.

    Returns:
        str: The MIME type of the buffer.
    """
    pdf_signature = b'%PDF-1.'

    if data.startswith(pdf_signature):
        return 'application/pdf'
    return 'plain'


def get_codepage():
    if 'windows' in platform().lower():
        result = subprocess.getoutput("chcp")
        return f'cp{result.split()[-1]}'
    else:
        result = subprocess.getoutput("locale charmap")
        return result.lower()


def make_collage(images: list) -> bytes:
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ–ª–ª–∞–∂ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, —Ä–∞—Å–ø–æ–ª–∞–≥–∞—è –∏—Ö –ø–æ 2 –∫–∞—Ä—Ç–∏–Ω–∫–∏ –≤ —Ä—è–¥.
    –£—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫–∞—Ä—Ç–∏–Ω–æ–∫, –ø—Ä–∏–≤–æ–¥—è –∏—Ö –∫ –æ–¥–Ω–æ–º—É —Ä–∞–∑–º–µ—Ä—É –ø–µ—Ä–µ–¥ —Å–∫–ª–µ–π–∫–æ–π,
    —Å–æ—Ö—Ä–∞–Ω—è—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏. –§–æ–Ω –∫–æ–ª–ª–∞–∂–∞ –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π.

    Args:
        images (list): –°–ø–∏—Å–æ–∫ –±–∞–π—Ç–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.

    Returns:
        bytes: –ë–∞–π—Ç–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∞—è –∏—Ç–æ–≥–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–ª–ª–∞–∂–∞.
    """

    images = [PIL.Image.open(io.BytesIO(img)) for img in images]

    # –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É –∏ –≤—ã—Å–æ—Ç—É —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –∫–∞—Ä—Ç–∏–Ω–æ–∫
    max_width = max(img.width for img in images)
    max_height = max(img.height for img in images)

    # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –≤—Å–µ—Ö –∫–∞—Ä—Ç–∏–Ω–æ–∫ –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ, —Å–æ—Ö—Ä–∞–Ω—è—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏
    resized_images = []
    for img in images:
        # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
        scale_factor = min(max_width / img.width, max_height / img.height)

        # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
        new_width = int(img.width * scale_factor)
        new_height = int(img.height * scale_factor)

        # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–µ—Ç–æ–¥–∞ LANCZOS
        resized_img = img.resize((new_width, new_height), PIL.Image.LANCZOS)

        # –ï—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –∏–º–µ–µ—Ç –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
        if resized_img.mode != 'RGBA':
            resized_img = resized_img.convert('RGBA')

        resized_images.append(resized_img)

    # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–∞–∂ –∏–∑ –∫–∞—Ä—Ç–∏–Ω–æ–∫ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —Å –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º —Ñ–æ–Ω–æ–º
    collage_width = max_width * 2  # –®–∏—Ä–∏–Ω–∞ –∫–æ–ª–ª–∞–∂–∞ - 2 –∫–∞—Ä—Ç–∏–Ω–∫–∏ –≤ —Ä—è–¥
    collage_height = max_height * (len(images) // 2 + len(images) % 2)  # –í—ã—Å–æ—Ç–∞ –∫–æ–ª–ª–∞–∂–∞ - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—è–¥–æ–≤ * –≤—ã—Å–æ—Ç–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏

    collage = PIL.Image.new('RGBA', (collage_width, collage_height), (0, 0, 0, 0))  # –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω

    x_offset = 0
    y_offset = 0
    for i, img in enumerate(resized_images):
        collage.paste(img, (x_offset, y_offset), img) # –í—Å—Ç–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É —Å —É—á–µ—Ç–æ–º –µ–µ –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª–∞
        if (i + 1) % 2 == 0:
            y_offset += max_height
            x_offset = 0
        else:
            x_offset += max_width

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±—É—Ñ–µ—Ä
    result_image_as_bytes = io.BytesIO()
    collage.save(result_image_as_bytes, format='PNG') # PNG –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
    result_image_as_bytes.seek(0)
    return compress_png_bytes(result_image_as_bytes.read())


def get_image_size(data: bytes) -> tuple[int, int]:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –±–∞–π—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö.

    Args:
        data: –ë–∞–π—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.

    Returns:
        –ö–æ—Ä—Ç–µ–∂ (—à–∏—Ä–∏–Ω–∞, –≤—ã—Å–æ—Ç–∞) –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. 
        –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (0, 0).
    """
    try:
        image = PIL.Image.open(io.BytesIO(data))
        width, height = image.size
        return width, height
    except Exception as error:
        my_log.log2(f'utils:get_image_size: {error}')
        return 0, 0


def string_to_dict(input_string: str):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ —Å–ª–æ–≤–∞—Ä—å.

    Args:
        input_string: –°—Ç—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —Å–ª–æ–≤–∞—Ä—å.

    Returns:
        –°–ª–æ–≤–∞—Ä—å, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∏–∑ —Å—Ç—Ä–æ–∫–∏, –∏–ª–∏ None, –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –æ—à–∏–±–∫–∏.
    """
    try:
        decoded_object = json_repair.loads(input_string)
        if decoded_object:
            return decoded_object
    except Exception as error:
        my_log.log2(f'utils:string_to_dict: {error}')
    my_log.log2(f'utils:string_to_dict: {input_string}')
    return None


def heic2jpg(data: Union[bytes, str]) -> bytes:
    """Converts HEIC image data (bytes or filepath) to JPEG bytes.

    Args:
        data: The HEIC image data as bytes or a string representing the filepath.

    Returns:
        The JPEG image data as bytes, or an empty bytes object if conversion fails.
    """

    try:
        if isinstance(data, str):
            # If input is a filepath, open and read the file
            with open(data, 'rb') as f:
                data = f.read()

        with PIL.Image.open(io.BytesIO(data)) as image:
            with io.BytesIO() as output:
                image.save(output, format="JPEG")
                contents = output.getvalue()
        return contents

    except Exception as error:
        my_log.log2(f'utils:heic2jpg {error}')
        return b''


def compress_png_bytes(image_bytes: bytes) -> bytes:
    """Compresses a PNG image provided as bytes as much as possible.

    Args:
        image_bytes: The PNG image data as bytes.

    Returns:
        The compressed PNG image bytes, or the original 
        image_bytes if compression fails. Returns source if input is invalid.
    """
    try:
        # Open image from bytes
        img = PIL.Image.open(io.BytesIO(image_bytes))

        # Ensure the image is in PNG format
        if img.format != "PNG":
            return image_bytes  # Return original bytes if it's not a PNG

        # Convert image to RGB for color counting, if necessary
        if img.mode != "RGB":
            img = img.convert("RGB")

        # Count the number of unique colors
        unique_colors = len(img.getcolors(maxcolors=2**24))  # maxcolors to handle large images

        # If there are more than 256 unique colors, quantize the image
        if unique_colors < 256:
            img = img.quantize(colors=256)

        # Save with maximum compression and optimization
        with io.BytesIO() as compressed_buf:
            img.save(compressed_buf, "PNG", compress_level=9, optimize=True)
            compressed_image_bytes = compressed_buf.getvalue()

        return compressed_image_bytes

    except Exception as e:
        my_log.log2(f"utils:compress_png_bytes: Compression error: {e}")
        return image_bytes  # Return original bytes on error


if __name__ == '__main__':
    pass

    # print(bot_markdown_to_tts("–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä! Hello, world! 123 „Åì„Çì„Å´„Å°„ÅØ ‰Ω†Â•Ω –í —ç—Ç–æ–º –ø—Ä–∏–º–µ—Ä–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æworüòòüòó‚ò∫Ô∏èüòöüòôü•≤üòãüòõüòúü§™üòùü§ëü§óü§≠ü´¢ü´£ü§´ü§îü´°ü§êü§®üòêüòëüò∂ü´•üò∂‚Äçüå´Ô∏èüòèüòíüôÑüò¨üòÆ‚Äçüí®ü§•ü´®üòåüòîld–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ r'[^\p{L}\p{N}\p{P}]' –Ω–∞—Ö–æ–¥–∏—Ç –≤—Å–µ —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –±—É–∫–≤–∞–º–∏, —Ü–∏—Ñ—Ä–∞–º–∏ –∏–ª–∏ –∑–Ω–∞–∫–∞–º–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è, –∏ –∑–∞–º–µ–Ω—è–µ—Ç –∏—Ö –Ω–∞ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É. –ö–ª–∞—Å—Å —Å–∏–º–≤–æ–ª–æ–≤ \p{L} —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤—Å–µ–º –±—É–∫–≤–∞–º, \p{N} ‚Äî –≤—Å–µ–º —Ü–∏—Ñ—Ä–∞–º, –∞ \p{P} ‚Äî –≤—Å–µ–º –∑–Ω–∞–∫–∞–º –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è."))

    # print(get_codepage())
    # print(get_file_ext('c:\\123\123123.23'))
    # print(safe_fname('dfgd—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à–≥–≥–≥–≥–≥–≥–≥–≥–≥–≥–≥–≥–≥–≥–≥–≥–≥–≥–≥–≥–≥–≥–≥–≥–≥–≥–≥–≥—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—à—àfg\/dfg.tb'))
    t=r"""—Ä—à –µ—Ä—É–∫—É

## –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–º–æ—â—å—é –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Vosk –∏ —Ä–µ—Å—É—Ä—Å–∞ https://speechpad.ru/.

.  ## –î–ª—è —ç—Ç–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É Vosk –∏ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Ä–µ—Å—É—Ä—Å—É https://speechpad.ru/. –ó–∞—Ç–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –Ω–∞ –≤—Ö–æ–¥ –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.
[hi](https://example.com/123(123))
[hi](https://example.com/123123)

**–®–∞–≥ 3:**
. ### 135 –≤—ã–±–µ—Ä–∏—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É Vosk

–ø—Ä–∏–≤–µ—Ç  —è   –º–µ–¥–≤–µ–¥    –≤–∞

1. [a(x<sub>i</sub>) = j]: –≠—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –∞–ª–≥–æ—Ä–∏—Ç–º –æ–ø—Ä–µ–¥–µ–ª–∏–ª, –∫ –∫–∞–∫–æ–º—É –∫–ª–∞—Å—Ç–µ—Ä—É (j) –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –æ–±—ä–µ–∫—Ç (x<sub>i</sub>).

W(j) = Œ£<sub>j=1</sub><sup>k</sup> Œ£<sub>i=1</sub><sup>n</sup> [d(c<sub>j</sub>, x<sub>i</sub>)]<sup>2</sup>Œ†[a(x<sub>i</sub>) = j] ‚Üí min;

–ù—É __–≤–æ—Ç –∏ –Ω–∞–∫–ª–æ–Ω–Ω—ã–π__ —Ç–µ–∫—Å—Ç.



1. **–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç **`begin`** –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã:**
    `pascal
    program Program1;

    {... –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏ –ø—Ä–æ—Ü–µ–¥—É—Ä ...}

    {* –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å begin *}

    end.  // <- –°—Ç—Ä–æ–∫–∞ 24
    `

   **–†–µ—à–µ–Ω–∏–µ:** –î–æ–±–∞–≤—å—Ç–µ `begin` –ø–µ—Ä–µ–¥ —Å—Ç—Ä–æ–∫–æ–π 24 (–∏–ª–∏ —Ç–∞–º, –≥–¥–µ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –æ—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ –∫–æ–¥–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã).


–≠—Ç–æ _–Ω–∞–∫–ª–æ–Ω–Ω—ã–π _ —à—Ä–∏—Ñ—Ç
–≠—Ç–æ _–Ω–∞–∫–ª–æ–Ω–Ω—ã–π_ —à—Ä–∏—Ñ—Ç
–≠—Ç–æ _ –Ω–∞–∫–ª–æ–Ω–Ω—ã–π _ —à—Ä–∏—Ñ—Ç
–≠—Ç–æ _–Ω–∞–∫–ª–æ–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç_ –¥–∞?
–≠—Ç–æ _–Ω–∞–∫–ª–æ–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç –±–æ–ª—å—à–µ —á–µ–º
–Ω–∞ 1 —Å—Ç—Ä–æ–∫—É_ –¥–∞?
–≠—Ç–æ _–Ω–∞–∫–ª–æ–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç_–¥–∞?
–≠—Ç–æ –Ω–∞–∫–ª–æ–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç (_–¥–∞_?

–≠—Ç–æ *–Ω–∞–∫–ª–æ–Ω–Ω—ã–π * —à—Ä–∏—Ñ—Ç
–≠—Ç–æ *–Ω–∞–∫–ª–æ–Ω–Ω—ã–π* —à—Ä–∏—Ñ—Ç
–≠—Ç–æ * –Ω–∞–∫–ª–æ–Ω–Ω—ã–π * —à—Ä–∏—Ñ—Ç
–≠—Ç–æ *–Ω–∞–∫–ª–æ–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç* –¥–∞?
–≠—Ç–æ *–Ω–∞–∫–ª–æ–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç –±–æ–ª—å—à–µ —á–µ–º
–Ω–∞ 1 —Å—Ç—Ä–æ–∫—É* –¥–∞?
–≠—Ç–æ *–Ω–∞–∫–ª–æ–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç*–¥–∞?
–≠—Ç–æ *1* + *2* –Ω–∞–∫–ª–æ–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç –¥–∞?
–≠—Ç–æ –Ω–∞–∫–ª–æ–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç (*–¥–∞*?

–≠—Ç–æ _*–Ω–∞–∫–ª–æ–Ω–Ω—ã–π *_ —à—Ä–∏—Ñ—Ç
–≠—Ç–æ _*–Ω–∞–∫–ª–æ–Ω–Ω—ã–π*_ —à—Ä–∏—Ñ—Ç
–≠—Ç–æ _* –Ω–∞–∫–ª–æ–Ω–Ω—ã–π *_ —à—Ä–∏—Ñ—Ç
–≠—Ç–æ _*–Ω–∞–∫–ª–æ–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç*_ –¥–∞?
–≠—Ç–æ _*–Ω–∞–∫–ª–æ–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç –±–æ–ª—å—à–µ —á–µ–º
–Ω–∞ 1 —Å—Ç—Ä–æ–∫—É*_ –¥–∞?
–≠—Ç–æ _*–Ω–∞–∫–ª–æ–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç*_–¥–∞?
–≠—Ç–æ –Ω–∞–∫–ª–æ–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç (_*–¥–∞*_?

–≠—Ç–æ ~~–ø–µ—Ä–µ—á–µ—Ä–∫–Ω—É—Ç—ã–π~~ —à—Ä–∏—Ñ—Ç
–≠—Ç–æ [||—Å–ø–æ–π–ª–µ—Ä||, —à—Ä–∏—Ñ—Ç

–û–•*–ï–õ–ò –û–¢ –ü–ò*–î–ê–¢–û–°–¢–ò

   ```python
   plt.xticks(rotation=45, ha="right", fontsize=8)
   ```

–ü—Ä—è–º–∞—è, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è –ø–ª–æ—Å–∫–æ—Å—Ç–∏ A<sub>1</sub>BC –∏ A<sub>1</sub>AD ‚Äî —ç—Ç–æ –ø—Ä—è–º–∞—è A<sub>1</sub>A.
–ü—Ä—è–º–∞—è, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è –ø–ª–æ—Å–∫–æ—Å—Ç–∏ A<sub>1</sub>BC –∏ A<sup>1</sup>AD ‚Äî —ç—Ç–æ –ø—Ä—è–º–∞—è A<sub>1</sub>A.

—Ç–µ–∫—Å—Ç
> —Ü–∏—Ç–∞—Ç–∞ —Å—Ç—Ä–æ–∫–∞ *1*
> —Ü–∏—Ç–∞—Ç–∞ —Å—Ç—Ä–æ–∫–∞ *2*

> —Ü–∏—Ç–∞—Ç–∞ —Å—Ç—Ä–æ–∫–∞ *3*
—Ç–µ–∫—Å—Ç
> —Ü–∏—Ç–∞—Ç–∞ —Å—Ç—Ä–æ–∫–∞ *4*



text



# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
## –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è
### –ó–∞–≥–æ–ª–æ–≤–æ–∫ 3 —É—Ä–æ–≤–Ω—è
#### –ó–∞–≥–æ–ª–æ–≤–æ–∫ 4 —É—Ä–æ–≤–Ω—è

–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π —Ä–∏—Å—É–Ω–æ–∫ –¥–µ–≤—É—à–∫–∏ —Å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ –∫–∞—à—Ç–∞–Ω–æ–≤—ã–º–∏ –≤–æ–ª–æ—Å–∞–º–∏, –æ–¥–µ—Ç–æ–π –≤ —Å–µ—Ä—É—é —Ç–æ–ª—Å—Ç–æ–≤–∫—É —Å –∫–∞–ø—é—à–æ–Ω–æ–º. –û–Ω–∞ –≤—ã–≥–ª—è–¥–∏—Ç –≥—Ä—É—Å—Ç–Ω–æ–π –∏–ª–∏ —É—Å—Ç–∞–≤—à–µ–π, –µ—ë –≥–ª–∞–∑–∞ –æ–ø—É—Ö—à–∏–µ, –∞ –≤–∑–≥–ª—è–¥ –æ–ø—É—â–µ–Ω. –í —Ä—É–∫–µ –æ–Ω–∞ –¥–µ—Ä–∂–∏—Ç –∑–∞–∂–∂—ë–Ω–Ω—É—é —Å–∏–≥–∞—Ä–µ—Ç—É, –æ—Ç –∫–æ—Ç–æ—Ä–æ–π –∏–¥—ë—Ç –¥—ã–º.  –†–∏—Å—É–Ω–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω –≤ –º—É–ª—å—Ç—è—à–Ω–æ–º —Å—Ç–∏–ª–µ, –ª–∏–Ω–∏–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–µ—Ä–æ–≤–Ω—ã–µ, —á—Ç–æ –ø—Ä–∏–¥–∞—ë—Ç –µ–º—É –Ω–µ–±—Ä–µ–∂–Ω—ã–π, –Ω–æ –ø—Ä–∏ —ç—Ç–æ–º  –º–∏–ª—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä. –í –ø—Ä–∞–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å—å: `@PANI_STRAWBERRY`.

–ü–æ–¥–ø–∏—Å—å –Ω–∞ —Ä–∏—Å—É–Ω–∫–µ:

`@PANI_STRAWBERRY`

–ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥–æ–±–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:

```prompt
/img a cartoon drawing of a sad girl with short brown hair wearing a grey hoodie, holding a cigarette with smoke coming out of it. Her eyes are droopy and she looks tired. The style should be slightly messy and cute, like a quick sketch.  Include the watermark "@PANI_STRAWBERRY" in the bottom right corner.
```

    """
    print(bot_markdown_to_html(t))



    j = '''json(
{"detailed_description": "–ù–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω —Ñ—Ä–∞–≥–º–µ–Ω—Ç –æ–Ω–ª–∞–π–Ω-—Ç–µ—Å—Ç–∞ –∏–ª–∏ –æ–±—É—á–∞—é—â–µ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞, –ø–æ—Å–≤—è—â—ë–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞–º –∞–≤—Ç–æ—Ä—Å–∫–æ–≥–æ –ø—Ä–∞–≤–∞. \n\n**–¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:**\n\n–°–≤–µ—Ç–ª–∞–Ω–∞ –∑–≤—É–∫–æ—Ä–µ–∂–∏—Å—Å–µ—Ä\n–•–æ—Ä–æ—à–æ, –∞ –µ—Å–ª–∏ –º—ã —Ö–æ—Ç–∏–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫–æ–µ-–Ω–∏–±—É–¥—å –≤–∏–¥–µ–æ, –∞–≤—Ç–æ—Ä –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω –∏ –∫–æ—Ç–æ—Ä–æ–µ —É–∂–µ –º–Ω–æ–≥–∏–µ –ø–µ—Ä–µ–ø–æ—Å—Ç–∏–ª–∏...\n–í–µ–¥—å –º—ã –º–æ–∂–µ–º —Å–≤–æ–±–æ–¥–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –≤ –Ω–∞—à–µ–º —Ñ–∏–ª—å–º–µ?\n\n–ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –°–≤–µ—Ç–ª–∞–Ω–µ, –≤—ã–±–µ—Ä–∏—Ç–µ –í–°–ï –≤–µ—Ä–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã.\n\n1. –ù–µ—Ç, –∞–≤—Ç–æ—Ä –º–æ–∂–µ—Ç —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–µ –≤–∏–¥–µ–æ –∏ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ —Å—É–¥, –ø–æ—Ç—Ä–µ–±–æ–≤–∞–≤ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ –∑–∞ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ.\n2. –î–∞, –≤–∏–¥–µ–æ, –∫–æ—Ç–æ—Ä—ã–µ –º–Ω–æ–≥–∏–µ –ø–µ—Ä–µ–ø–æ—Å—Ç–∏–ª–∏, –Ω–µ –∑–∞—â–∏—â–∞–µ—Ç—Å—è –∞–≤—Ç–æ—Ä—Å–∫–∏–º –ø—Ä–∞–≤–æ–º.\n3. –î–∞, –µ—Å–ª–∏ –Ω–∞–º —É–¥–∞—Å—Ç—Å—è —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–≤—Ç–æ—Ä–æ–º –∏ –ø–æ–ø—Ä–æ—Å–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ.\n4. –î–∞, –æ–Ω–æ —É–∂–µ –ø—Ä–∏–æ–±—Ä–µ–ª–æ —Å—Ç–∞—Ç—É—Å —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, —Ç.–∫. –¥–∞–≤–Ω–æ —Ö–æ–¥–∏—Ç –≤ —Å–µ—Ç–∏.\n5. –î–∞, —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å, —á—Ç–æ –º—ã –≥–æ—Ç–æ–≤—ã —Å–æ—Å–ª–∞—Ç—å—Å—è –Ω–∞ –∞–≤—Ç–æ—Ä–∞, –µ—Å–ª–∏ –æ–Ω –Ω–∞–π–¥—ë—Ç—Å—è.\n\n**–≠—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∑–Ω–∞–Ω–∏–π –≤ –æ–±–ª–∞—Å—Ç–∏ –∞–≤—Ç–æ—Ä—Å–∫–æ–≥–æ –ø—Ä–∞–≤–∞**, –∏, –≤–µ—Ä–æ—è—Ç–Ω–æ, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏ —è–≤–ª—è—é—Ç—Å—è –≤–∞—Ä–∏–∞–Ω—Ç—ã 2 –∏ 5, —Ç–∞–∫ –∫–∞–∫ –∞–≤—Ç–æ—Ä—Å–∫–∏–µ –ø—Ä–∞–≤–∞ –Ω–∞ –≤–∏–¥–µ–æ, –∫–æ—Ç–æ—Ä–æ–µ –º–Ω–æ–≥–∏–µ –ø–µ—Ä–µ–ø–æ—Å—Ç–∏–ª–∏, –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∞ —É–∫–∞–∑–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä—Å—Ç–≤–∞, –µ—Å–ª–∏ –æ–Ω–æ –±—É–¥–µ—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ, - —ç—Ç–æ –ø—Ä–∏–∑–Ω–∞–∫ —É–≤–∞–∂–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏.", "extracted_formatted_text": "–°–≤–µ—Ç–ª–∞–Ω–∞ –∑–≤—É–∫–æ—Ä–µ–∂–∏—Å—Å–µ—Ä\n–•–æ—Ä–æ—à–æ, –∞ –µ—Å–ª–∏ –º—ã —Ö–æ—Ç–∏–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫–æ–µ-–Ω–∏–±—É–¥—å –≤–∏–¥–µ–æ, –∞–≤—Ç–æ—Ä –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω –∏ –∫–æ—Ç–æ—Ä–æ–µ —É–∂–µ –º–Ω–æ–≥–∏–µ –ø–µ—Ä–µ–ø–æ—Å—Ç–∏–ª–∏...\n–í–µ–¥—å –º—ã –º–æ–∂–µ–º —Å–≤–æ–±–æ–¥–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –≤ –Ω–∞—à–µ–º —Ñ–∏–ª—å–º–µ?\n\n–ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –°–≤–µ—Ç–ª–∞–Ω–µ, –≤—ã–±–µ—Ä–∏—Ç–µ –í–°–ï –≤–µ—Ä–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã.\n\n‚ñ° –ù–µ—Ç, –∞–≤—Ç–æ—Ä –º–æ–∂–µ—Ç —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–µ –≤–∏–¥–µ–æ –∏ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ —Å—É–¥, –ø–æ—Ç—Ä–µ–±–æ–≤–∞–≤ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ –∑–∞ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ.\n‚ñ° –î–∞, –≤–∏–¥–µ–æ, –∫–æ—Ç–æ—Ä—ã–µ –º–Ω–æ–≥–∏–µ –ø–µ—Ä–µ–ø–æ—Å—Ç–∏–ª–∏, –Ω–µ –∑–∞—â–∏—â–∞–µ—Ç—Å—è –∞–≤—Ç–æ—Ä—Å–∫–∏–º –ø—Ä–∞–≤–æ–º.\n‚ñ° –î–∞, –µ—Å–ª–∏ –Ω–∞–º —É–¥–∞—Å—Ç—Å—è —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–≤—Ç–æ—Ä–æ–º –∏ –ø–æ–ø—Ä–æ—Å–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ.\n‚ñ° –î–∞, –æ–Ω–æ —É–∂–µ –ø—Ä–∏–æ–±—Ä–µ–ª–æ —Å—Ç–∞—Ç—É—Å —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, —Ç.–∫. –¥–∞–≤–Ω–æ —Ö–æ–¥–∏—Ç –≤ —Å–µ—Ç–∏.\n‚ñ° –î–∞, —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å, —á—Ç–æ –º—ã –≥–æ—Ç–æ–≤—ã —Å–æ—Å–ª–∞—Ç—å—Å—è –Ω–∞ –∞–≤—Ç–æ—Ä–∞, –µ—Å–ª–∏ –æ–Ω –Ω–∞–π–¥—ë—Ç—Å—è.", "image_generation_prompt": "Generate an image of a computer screen displaying a quiz or test question related to copyright law. The question should be presented in a clear and easy-to-read format, with multiple-choice answer options. The question should involve a scenario where someone wants to use a video in their film, but they are unsure about the copyright status of the video. The answer options should explore the different aspects of copyright law, such as fair use, attribution, and the rights of the copyright holder. The image should also include some visual elements that are relevant to the scenario, such as a photo of a person filming a video or a video player interface. The screen should be dark and the text should be light colored for better readability. The prompt should be in Russian, something along the lines: \"–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤–æ–ø—Ä–æ—Å –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –∏–ª–∏ —Ç–µ—Å—Ç–∞, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å –∑–∞–∫–æ–Ω–æ–º –æ–± –∞–≤—Ç–æ—Ä—Å–∫–æ–º –ø—Ä–∞–≤–µ. –í–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –≤ —á–µ—Ç–∫–æ–º –∏ –ª–µ–≥–∫–æ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º. –í–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å –≤ —Å–µ–±—è —Å—Ü–µ–Ω–∞—Ä–∏–π, –≤ –∫–æ—Ç–æ—Ä–æ–º –∫—Ç–æ-—Ç–æ —Ö–æ—á–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ –≤ —Å–≤–æ–µ–º —Ñ–∏–ª—å–º–µ, –Ω–æ –Ω–µ —É–≤–µ—Ä–µ–Ω –≤ —Å—Ç–∞—Ç—É—Å–µ –∞–≤—Ç–æ—Ä—Å–∫–∏—Ö –ø—Ä–∞–≤ –Ω–∞ –≤–∏–¥–µ–æ. –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–æ–ª–∂–Ω—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã –∑–∞–∫–æ–Ω–∞ –æ–± –∞–≤—Ç–æ—Ä—Å–∫–æ–º –ø—Ä–∞–≤–µ, —Ç–∞–∫–∏–µ –∫–∞–∫ –¥–æ–±—Ä–æ—Å–æ–≤–µ—Å—Ç–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ, —É–∫–∞–∑–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä—Å—Ç–≤–∞ –∏ –ø—Ä–∞–≤–∞ –ø—Ä–∞–≤–æ–æ–±–ª–∞–¥–∞—Ç–µ–ª—è. –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–∫–∂–µ –¥–æ–ª–∂–Ω–æ –≤–∫–ª—é—á–∞—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ —Å—Ü–µ–Ω–∞—Ä–∏—é, —Ç–∞–∫–∏–µ –∫–∞–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —á–µ–ª–æ–≤–µ–∫–∞, —Å–Ω–∏–º–∞—é—â–µ–≥–æ –≤–∏–¥–µ–æ, –∏–ª–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤–∏–¥–µ–æ–ø–ª–µ–µ—Ä–∞. –≠–∫—Ä–∞–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–µ–º–Ω—ã–º, –∞ —Ç–µ–∫—Å—Ç —Å–≤–µ—Ç–ª–æ–≥–æ —Ü–≤–µ—Ç–∞ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏.\""}
})
    '''
    # print(string_to_dict(j))


    # d = heic2jpg('d:/downloads/1.heic')
    # with open('d:/downloads/1.jpg', 'wb') as f:
    #     f.write(d)


    # print(get_full_time())

    # counter = MessageCounter()
    # print(counter.status('user1'))
    # counter.increment('user1', 5)
    # print(counter.status('user1'))
    # counter.increment('user1', 1)
    # print(counter.status('user1'))

    pass
