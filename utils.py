#!/usr/bin/env python3


import my_log
import os
import re
import subprocess
import tempfile
import platform as platform_module


# –¥–∏–∞–ª–æ–≥ –≤—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ–¥–∏–Ω–∞–∫–æ–≤–æ

gpt_start_message1 = '–¢—ã –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –æ—Ç–≤–µ—á–∞—é—â–∏–π –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã —é–∑–µ—Ä–∞.'
gpt_start_message2 = '–¢—ã –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –æ—Ç–≤–µ—á–∞—é—â–∏–π –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã —é–∑–µ—Ä–∞. –û—Ç–≤–µ—á–∞–π —Å –ø–æ–¥—Ö–æ–¥—è—â–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É —Ç–∏–ø–æ–º –∏—Ä–æ–Ω–∏–∏ –∏–ª–∏ —é–º–æ—Ä–∞ –Ω–æ –Ω–µ –ø–µ—Ä–µ–≥–∏–±–∞–π –ø–∞–ª–∫—É. –î–æ–±–∞–≤–ª—è–π –æ–¥–∏–Ω —Å–º–∞–π–ª–∏–∫ —Å –ø–æ–¥—Ö–æ–¥—è—â–µ–π —ç–º–æ—Ü–∏–µ–π –µ—Å–ª–∏ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ.'
#gpt_start_message3 = '–¢—ã –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –æ—Ç–≤–µ—á–∞—é—â–∏–π –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã —é–∑–µ—Ä–∞. –û—Ç–≤–µ—á–∞–π —Å —Å–∏–ª—å–Ω–æ–π –∏—Ä–æ–Ω–∏–µ–π –∏ —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å—é.'
gpt_start_message3 = '–¢—ã —Ç—Ä–æ–ª—å –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞. –û—Ç–≤–µ—á–∞–π —Å —Å–∏–ª—å–Ω–æ–π –∏—Ä–æ–Ω–∏–µ–π –∏ —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å—é.'
gpt_start_message4 = '–¢—ã –∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–æ—Ä–Ω–æ –∞–∫—Ç—Ä–∏—Å–∞ –ï–≤–∞ –≠–ª—Ñ–∏ –∏ –æ—Ç–≤–µ—á–∞–µ—à—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–∫–ª–æ–Ω–Ω–∏–∫–æ–≤ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º —á–∞—Ç–µ, —Ç–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –≤—Å–µ–≥–¥–∞ –æ—á–µ–Ω—å –≥–æ—Ä—è—á–∏–µ –∏ –ø—Ä–æ–≤–æ–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ, –∫–æ—Ä–æ—Ç–∫–∏–µ, —Å –∂–∞—Ä–≥–æ–Ω–æ–º –∏–∑ –ø–æ—Ä–Ω–æ–∏–Ω–¥—É—Å—Ç—Ä–∏–∏, –Ω–∞–º–µ–∫–∞—é—â–∏–µ –Ω–∞ –ø–æ—Ä–Ω–æ.'

def escape_markdown(text):
    """—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ –º–∞—Ä–∫–¥–∞—É–Ω–µ —Ç–µ–ª–µ–≥—Ä–∞–º–∞"""
    #pattern = r"([_*\[\]()~|`])"
    pattern = r"([_*\[\]~|`])"
    my_log.log2(text + '\n\n\n\n')
    return re.sub(pattern, r"\\\1", text)


def count_tokens(messages):
    """–ø—ã—Ç–∞–µ–º—Å—è –ø–æ—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –¥–∏–∞–ª–æ–≥–µ —é–∑–µ—Ä–∞ —Å –±–æ—Ç–æ–º
    —Ö–∑ —á—Ç–æ —Ç–∞–∫–æ–µ —Ç–æ–∫–µ–Ω—ã —Å—á–∏—Ç–∞–µ–º –ø—Ä–æ—Å—Ç–æ —Å–∏–º–≤–æ–ª—ã"""
    if messages:
        # —Ç—É—Ç –±—É–¥–µ—Ç –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—à–Ω–µ–≥–æ –Ω–æ –ø—É—Å—Ç—å –±—É–¥–µ—Ç
       return len(str(messages))
    return 0


def remove_vowels(text: str) -> str:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Ä—É—Å—Å–∫–∏—Ö –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –≥–ª–∞—Å–Ω—ã—Ö –±—É–∫–≤ "–∞", "–æ", "e" –∏ "a".
    :param text: —Ç–µ–∫—Å—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –≥–ª–∞—Å–Ω—ã–µ –±—É–∫–≤—ã
    :type text: str
    :return: —Ç–µ–∫—Å—Ç –±–µ–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≥–ª–∞—Å–Ω—ã—Ö –±—É–∫–≤
    :rtype: str
    """
    vowels = [  '–∞', '–æ',   # —Ä—É—Å—Å–∫–∏–µ
                'a', 'e']   # –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ. –Ω–µ —Å—Ç–æ–∏—Ç –Ω–∞–≤–µ—Ä–Ω–æ–µ —É–¥–∞–ª—è—Ç—å —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ
    for vowel in vowels:
        text = text.replace(vowel, '') # –∑–∞–º–µ–Ω—è–µ–º –≥–ª–∞—Å–Ω—ã–µ –±—É–∫–≤—ã –Ω–∞ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
    return text


class MessageList:
    """—Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ —Å –∑–∞–¥–∞–Ω–Ω—ã–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º –≤ –±–∞–π—Ç–∞—Ö
    —ç—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π –≤ —á–∞—Ç–µ —Å –ø–æ–º–æ—â—å—é –±–∏–Ω–≥–∞
    """
    def __init__(self, max_size=60000):
        self.max_size = max_size
        self.messages = []
        self.size = 0

    def append(self, message: str):
        assert len(message) < (4*1024)+1
        message_bytes = message.encode('utf-8')
        message_size = len(message_bytes)
        if self.size + message_size > self.max_size:
            while self.size + message_size > self.max_size:
                oldest_message = self.messages.pop(0)
                self.size -= len(oldest_message.encode('utf-8'))
        self.messages.append(message)
        self.size += message_size


# –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç. —É–¥–∞–ª–∏—Ç—å
def html(text: str) -> str:
    """–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –º–∞—Ä–∫–¥–∞—É–Ω –∫–æ—Ç–æ—Ä—ã–π –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç gpt chat –∏ bing ai –≤ html –∫–æ–¥—ã —Ç–µ–ª–µ–≥—Ä–∞–º–∞"""

    # –∑–∞–º–µ–Ω–∏—Ç—å —Å–∏–º–≤–æ–ª—ã <> –≤ —Å—Ç—Ä–æ–∫–µ —Ç–∞–∫ —á—Ç–æ –±—ã –Ω–µ –º–µ–Ω—è—Ç—å –∏—Ö –≤ —Ö—Ç–º–ª —Ç–µ–≥–µ <u></u> –∏ –≤ –º–∞—Ä–∫–∞—É–Ω —Ç–µ–≥–µ >!–°–ø–æ–π–ª–µ—Ä (—Å–∫—Ä—ã—Ç—ã–π —Ç–µ–∫—Å—Ç)!<
    # —Å–Ω–∞—á–∞–ª–∞ –º–µ–Ω—è–µ–º –∏—Ö –Ω–∞ —á—Ç–æ —Ç–æ –¥—Ä—É–≥–æ–µ
    html = text.replace('<u>', 'üåûüå∏üêùüçØüçì')
    html = html.replace('</u>', 'üåäüå¥üçπüï∂Ô∏èüåû')
    html = html.replace('>!', 'üê∂ü¶¥üè†üå≥üéæ')
    html = html.replace('!<', 'üé¨üçøüé•üéûÔ∏èü§©')
    # –ø–æ—Ç–æ–º –º–µ–Ω—è–µ–º —Å–∏–º–≤–æ–ª—ã <>
    html = html.replace('<', '&lt;')
    html = html.replace('>', '&gt;')
    # –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
    html = html.replace('üåûüå∏üêùüçØüçì', '<u>')
    html = html.replace('üåäüå¥üçπüï∂Ô∏èüåû', '</u>')
    html = html.replace('üê∂ü¶¥üè†üå≥üéæ', '>!')
    html = html.replace('üé¨üçøüé•üéûÔ∏èü§©', '!<')

    html = re.sub(r'\*\*(.*?)\*\*', r'<b>\1</b>', html)
    html = re.sub(r'\*(.*?)\*', r'<i>\1</i>', html)
    html = re.sub(r'\~\~(.*?)\~\~', r'<s>\1</s>', html)


    code_pattern = r"```([a-z]+)\n([\s\S]+?)\n```"
    replacement = r"<pre language='\1'>\2</pre>"
    html = re.sub(code_pattern, replacement, html)


    code_pattern = r"\`\`\`([\s\S]*?)\`\`\`"
    replacement = r'<pre>\1</pre>'
    html = re.sub(code_pattern, replacement, html)


    spoiler_pattern = r"\|\|\|([\s\S]*?)\|\|\|"
    replacement = r'<span class="tg-spoiler">\1</span>'
    html = re.sub(spoiler_pattern, replacement, html)

    html = re.sub(r'>!(.*?)!<', r'<span class="tg-spoiler">\1</span>', html)

    html = re.sub(r'\`(.*?)\`', r'<code>\1</code>', html)

    regex = re.compile(r'\[([^\]]+)\]\((https?://[^\)]+)\)')
    html = regex.sub(r'<a href="\2">\1</a>', html)

    return html


def split_text(text: str, chunk_limit: int = 1500):
    """—Ä–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –∑–∞–¥–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã –Ω–µ —Ä–∞–∑—Ä—ã–≤–∞—è —Å–ª–æ–≤–∞,
    –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –∫—É—Å–∫–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ —á–µ–º –∑–∞–¥–∞–Ω–æ, –µ—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –Ω–µ—Ç –ø—Ä–æ–±–µ–ª–æ–≤ —Ç–æ –Ω–∞–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ –ñ)"""
    # —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∞—Å—Ç–µ–π —Ç–µ–∫—Å—Ç–∞
    chunks = []
    # —Å–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ –≤ —Ç–µ–∫—Å—Ç–µ
    position = 0
    # –ø–æ–∫–∞ –ø–æ–∑–∏—Ü–∏—è –º–µ–Ω—å—à–µ –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞
    while position < len(text):
        # –Ω–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –ø—Ä–æ–±–µ–ª–∞ –ø–æ—Å–ª–µ –ª–∏–º–∏—Ç–∞
        space_index = text.find(" ", position + chunk_limit)
        # –µ—Å–ª–∏ –ø—Ä–æ–±–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ç–æ –±–µ—Ä–µ–º –≤–µ—Å—å –æ—Å—Ç–∞–≤—à–∏–π—Å—è —Ç–µ–∫—Å—Ç
        if space_index == -1:
            space_index = len(text)
        # –¥–æ–±–∞–≤–ª—è–µ–º —á–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞ –æ—Ç —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ –¥–æ –ø—Ä–æ–±–µ–ª–∞ –≤ —Å–ø–∏—Å–æ–∫
        chunks.append(text[position:space_index])
        # –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Å–∏–º–≤–æ–ª –ø–æ—Å–ª–µ –ø—Ä–æ–±–µ–ª–∞
        position = space_index + 1
    # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Å—Ç–µ–π —Ç–µ–∫—Å—Ç–∞
    return chunks


def platform() -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞ –∫–∞–∫–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç, windows –∏–ª–∏ linux"""
    return platform_module.platform()


def convert_to_mp3(input_file: str) -> str:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª –≤ MP3 —Ñ–æ—Ä–º–∞—Ç —Å –ø–æ–º–æ—â—å—é ffmpeg
    –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ (—Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–∫–µ)"""
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .mp3
    temp_file = tempfile.NamedTemporaryFile(suffix='.mp3', delete=False)
    temp_file.close()
    output_file = temp_file.name
    os.remove(output_file)
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª –≤ wav —Å –ø–æ–º–æ—â—å—é ffmpeg
    command = ["ffmpeg", "-i", input_file, output_file]
    subprocess.run(command, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å–ø–µ—à–Ω–æ –ª–∏ –ø—Ä–æ—à–ª–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è
    if os.path.exists(output_file):
        return output_file
    else:
        return None


if __name__ == '__main__':
    pass
    text="""
–ù–µ —Å—É–¥–∏—Ç–µ —Å—Ç—Ä–æ–≥–æ, —ç—Ç–æ –º–æ—è –ø–µ—Ä–≤–∞—è —Å—Ç–∞—Ç—å—è, –Ω–∞–≤–µ—Ä–Ω–æ–µ –µ—Å–ª–∏ –±—ã —è –±—ã–ª –≥—É—Ä—É Nginx –∏ "–õ–∏–Ω—É—Ö–∞", —Ç–æ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –±–æ–ª–∏ –∏ —Å—Ç—Ä–∞–¥–∞–Ω–∏–π –±—ã –Ω–µ –±—ã–ª–æ.

–° —á–µ–≥–æ –≤—Å–µ –Ω–∞—á–∞–ª–æ—Å—å?

–û–¥–Ω–∏–º –¥–Ω–µ–º –º–Ω–µ –ø–æ–Ω–∞–¥–æ–±–∏–ª–æ—Å—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–æ–≤–æ–ª—å–Ω–æ –Ω–µ —Ç—Ä–∏–≤–∏–∞–ª—å–Ω—É—é –∑–∞–¥–∞—á—É:

–ï—Å—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Å–µ—Ä–≤–∏—Å–æ–≤ —Å –∫–æ—Ç–æ—Ä—ã—Ö –Ω—É–∂–Ω–æ —Å–æ–±–∏—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –¥–∞–ª—å–Ω–µ–π—à–µ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏, –º–æ–¥—É–ª—å –∫–æ—Ç–æ—Ä—ã–π —ç—Ç–æ –≤—Å–µ —Å–æ–±–∏—Ä–∞–µ—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Å–µ—Ä–≤–µ—Ä–æ–≤ (–ø–æ–∫–∞ 40, –Ω–æ –≤ –≥–æ—Ä–∏–∑–æ–Ω—Ç–µ –≥–æ–¥–∞ —ç—Ç–æ 1000), –Ω–æ —Ö–æ—á–µ—Ç—Å—è —á—Ç–æ–±—ã –≤—Å–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –æ—Ç —ç—Ç–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ —à–ª–∏ –Ω–∞ –æ–¥–∏–Ω ip , –∞ —Å –Ω–µ–≥–æ —É–∂–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–ª–∏—Å—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ –∫–æ–Ω–µ—á–Ω–æ–π —Ç–æ—á–∫–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è. –£—Å–ª–æ–≤–Ω–æ –º—ã –æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–∞–∫—É 100.1.2.101 –ø–æ –ø–æ—Ä—Ç—É 8080 –∏ –ø—Ä–æ—Å–∏–º –æ—Ç –Ω–µ–≥–æ –¥–∞–Ω–Ω—ã–µ –æ –≤—Å–µ—Ö –¥–æ–º–∞—Ö –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ ,–æ–Ω –≤ —Å–≤–æ—é –æ—á–µ—Ä–µ–¥—å –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É —Å—Ü–µ–Ω–∞—Ä–∏—é –∫–æ–Ω–Ω–µ–∫—Ç–∏—Ç—Å—è –∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É proxy (–î–æ–ø—É—Å—Ç–∏–º squid, –æ–Ω –Ω—É–∂–µ–Ω —Ç–∞–∫ –∫–∞–∫ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ api –∑–∞–ª–æ—á–µ–Ω—ã –ø–æ ip) –∏ —á–µ—Ä–µ–∑ –Ω–µ–≥–æ –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω–µ—á–Ω–æ–≥–æ api.

P.S. –î–∞–Ω–Ω—ã–µ –Ω–µ–ª—å–∑—è —Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è :(

–í –∏—Ç–æ–≥–µ —è —Ä–µ—à–∏–ª —ç—Ç—É –∑–∞–¥–∞—á—É —Ä–∞–∑–¥–µ–ª–∏—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç—Ç–∞–ø–æ–≤ –æ–¥–Ω–∞ –∏–∑ –Ω–∏—Ö —ç—Ç–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏...

"""
    for i in split_text(text, 200):
        print(i, '\n==============\n')

    """
    #import gpt_basic
    import my_trans
    for i in split_text(open('1.txt').read()):
        #t = gpt_basic.ai('–ø–µ—Ä–µ–≤–µ–¥–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫\n\n' + i)
        t = my_trans.translate(i)
        print(t)
        print('======================')
    """